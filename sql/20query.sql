-- CREATE TABLES SQL
-- Kovács Bálit-Hunor
-- Informatika II. D

-- TOTAL TABLES: 27

-- 1. Oldest Music Publisher in the database
SELECT * FROM PUBLISHERS
ORDER BY PUBLISHER_FORMATIONDATE
FETCH FIRST 1 ROW ONLY;

-- 2. Publishers who worked with Kanye West;
SELECT PUBLISHER_NAME "Worked with Kanye" FROM PUBLISHERS
WHERE PUBLISHER_ID  in (
	SELECT PUBLISHER_ID FROM PRODUCERSPUBLISHING
		WHERE PRODUCER_ID = (
		SELECT PRODUCER_ID  FROM PRODUCERS 
		WHERE PRODUCER_NAME LIKE 'Kanye West'));
	
-- 3. How many songs are named after christmas?
SELECT COUNT(*) "Nr. of music about Christmas" FROM MUSICS
WHERE MUSIC_NAME LIKE '%hristmas%';	

-- 4. What is the 3 most newest music int the database?
SELECT MUSIC_ID, MUSIC_NAME, MUSIC_RELEASE_DATE FROM MUSICS
ORDER BY MUSIC_RELEASE_DATE  DESC
FETCH FIRST 3 ROW ONLY ;

-- 5. Which artists are playing more than two instruments?
WITH temp AS (SELECT ARTIST_ID AS ai, COUNT(INSTRUMENT_ID) instr FROM PLAYS
GROUP BY ARTIST_ID
ORDER BY instr DESC
FETCH FIRST 1 ROW ONLY)
SELECT A.ARTIST_NAME 
FROM ARTISTS A, temp
WHERE A.ARTIST_ID = temp.ai;

-- 6. Billboard Artist Award Winners
SELECT LISTAGG(ARTIST_NAME, '; ') "Billboard Artist Winners"  FROM ARTISTS
WHERE ARTIST_ID IN (
WITH bbas AS (SELECT AWARD_ID FROM AWARDS
WHERE AWARD_NAME LIKE '%Billboard%')
SELECT a.ARTIST_ID FROM bbas, ARTISTSAWARDED a
WHERE a.AWARD_ID IN bbas.AWARD_ID
GROUP BY a.ARTIST_ID );

-- 7. Muisics from a year before
SELECT MUSIC_NAME, MUSIC_RELEASE_DATE FROM
MUSICS
WHERE  EXTRACT( YEAR FROM MUSIC_RELEASE_DATE ) >  EXTRACT( YEAR FROM SYSDATE ) - 2
AND EXTRACT( YEAR FROM MUSIC_RELEASE_DATE ) < EXTRACT( YEAR FROM SYSDATE )
ORDER BY MUSIC_RELEASE_DATE;

-- 8. The names of all artists who have won awards
SELECT ARTIST_NAME FROM ARTISTS a
JOIN ARTISTSAWARDED aa ON aa.ARTIST_ID = a.ARTIST_ID
JOIN AWARDS aw ON aw.AWARD_ID = aa.AWARD_ID
GROUP BY ARTIST_NAME;

-- 9. The names of all artists who can play both the Guitar and Drums, but cannot sing
SELECT a.ARTIST_NAME, i.INSTRUMENT_NAME
FROM ARTISTS a
JOIN PLAYS p ON p.ARTIST_ID = a.ARTIST_ID
JOIN INSTRUMENTS i ON i.INSTRUMENT_ID = p.INSTRUMENT_ID
WHERE EXISTS (
  SELECT 1 FROM PLAYS p2
  JOIN INSTRUMENTS i2 ON i2.INSTRUMENT_ID = p2.INSTRUMENT_ID
  WHERE p2.ARTIST_ID = a.ARTIST_ID
  AND i2.INSTRUMENT_NAME IN ('Acoustic Guitar', 'Drum')
)
AND NOT EXISTS (
  SELECT 1 FROM PLAYS p3
  JOIN INSTRUMENTS i3 ON i3.INSTRUMENT_ID = p3.INSTRUMENT_ID
  WHERE p3.ARTIST_ID = a.ARTIST_ID
  AND i3.INSTRUMENT_NAME = 'Vocal'
);

-- 10. The names and locations of all studios located in a given country
SELECT s.STUDIO_NAME, l.STUDIOLOCATION_NAME, l.STUDIOLOCATION_COUNTY, l.STUDIOLOCATION_SETTLEMENT, l.STUDIOLOCATION_STREET, l.STUDIOLOCATION_NR
FROM STUDIOS s
JOIN STUDIOLOCATIONS l ON l.STUDIOLOCATION_ID = s.STUDIOLOCATION_ID
WHERE l.STUDIOLOCATION_COUNTRY = 'United States';

-- 11. The names of all artists and the names of the instruments they play
SELECT ARTISTS.ARTIST_NAME, INSTRUMENTS.INSTRUMENT_NAME
FROM ARTISTS
INNER JOIN PLAYS ON ARTISTS.ARTIST_ID = PLAYS.ARTIST_ID
INNER JOIN INSTRUMENTS ON PLAYS.INSTRUMENT_ID = INSTRUMENTS.INSTRUMENT_ID;

-- 12. The same as in the 11 BUT with list aggregation
SELECT ARTISTS.ARTIST_NAME, LISTAGG(INSTRUMENTS.INSTRUMENT_NAME, ', ') WITHIN GROUP (ORDER BY INSTRUMENTS.INSTRUMENT_NAME) AS instruments
FROM ARTISTS
INNER JOIN PLAYS ON ARTISTS.ARTIST_ID = PLAYS.ARTIST_ID
INNER JOIN INSTRUMENTS ON PLAYS.INSTRUMENT_ID = INSTRUMENTS.INSTRUMENT_ID
GROUP BY ARTISTS.ARTIST_NAME;

-- 13. The names of all rehearsal rooms and the names of the locations they are in
SELECT REHEARSALROOMS.REHEARSALROOM_NAME, REHEARSALROOMLOCATIONS.REHEARSALROOMLOCATION_NAME
FROM REHEARSALROOMS
INNER JOIN REHEARSALROOMLOCATIONS ON REHEARSALROOMS.REHEARSALROOMLOCATION_ID = REHEARSALROOMLOCATIONS.REHEARSALROOMLOCATION_ID;

-- 14. The names of all artists and the dates and times of their practices
SELECT ARTISTS.ARTIST_NAME, PRACTICING.PRACTICE_START, PRACTICING.PRACTICE_END
FROM ARTISTS
INNER JOIN PRACTICING ON ARTISTS.ARTIST_ID = PRACTICING.ARTIST_ID;

-- 15. The names of all rehearsal rooms and the names of the artists who practiced in them
SELECT REHEARSALROOMS.REHEARSALROOM_NAME, ARTISTS.ARTIST_NAME
FROM REHEARSALROOMS
INNER JOIN PRACTICING ON REHEARSALROOMS.REHEARSALROOM_ID = PRACTICING.REHEARSALROOM_ID
INNER JOIN ARTISTS ON PRACTICING.ARTIST_ID = ARTISTS.ARTIST_ID;

-- 16. The names of all artists who have practiced in the "Rose" Room and the names of all artists who have practiced in the "Lily" Room:
SELECT ARTISTS.ARTIST_NAME, REHEARSALROOMS.REHEARSALROOM_NAME
FROM ARTISTS
INNER JOIN PRACTICING ON ARTISTS.ARTIST_ID = PRACTICING.ARTIST_ID
INNER JOIN REHEARSALROOMS ON PRACTICING.REHEARSALROOM_ID = REHEARSALROOMS.REHEARSALROOM_ID
WHERE REHEARSALROOMS.REHEARSALROOM_NAME = 'Rose'
UNION
SELECT ARTISTS.ARTIST_NAME, REHEARSALROOMS.REHEARSALROOM_NAME
FROM ARTISTS
INNER JOIN PRACTICING ON ARTISTS.ARTIST_ID = PRACTICING.ARTIST_ID
INNER JOIN REHEARSALROOMS ON PRACTICING.REHEARSALROOM_ID = REHEARSALROOMS.REHEARSALROOM_ID
WHERE REHEARSALROOMS.REHEARSALROOM_NAME = 'Lily';

-- 17. The names of all artists who have practiced in the "Lily" room and the names of all artists who have practiced in the "Orchid" room, but eliminate any duplicates:
SELECT DISTINCT ARTISTS.ARTIST_NAME, REHEARSALROOMS.REHEARSALROOM_NAME
FROM ARTISTS
INNER JOIN PRACTICING ON ARTISTS.ARTIST_ID = PRACTICING.ARTIST_ID
INNER JOIN REHEARSALROOMS ON PRACTICING.REHEARSALROOM_ID = REHEARSALROOMS.REHEARSALROOM_ID
WHERE REHEARSALROOMS.REHEARSALROOM_NAME = 'Orchid'
UNION
SELECT DISTINCT ARTISTS.ARTIST_NAME, REHEARSALROOMS.REHEARSALROOM_NAME
FROM ARTISTS
INNER JOIN PRACTICING ON ARTISTS.ARTIST_ID = PRACTICING.ARTIST_ID
INNER JOIN REHEARSALROOMS ON PRACTICING.REHEARSALROOM_ID = REHEARSALROOMS.REHEARSALROOM_ID
WHERE REHEARSALROOMS.REHEARSALROOM_NAME = 'Lily';

-- 18. The names of all awards and the names of the artists who have received them
SELECT AWARDS.AWARD_NAME, ARTISTS.ARTIST_NAME
FROM AWARDS
INNER JOIN ARTISTSAWARDED ON AWARDS.AWARD_ID = ARTISTSAWARDED.AWARD_ID
INNER JOIN ARTISTS ON ARTISTSAWARDED.ARTIST_ID = ARTISTS.ARTIST_ID;

-- 19. The names of all music tracks and the genres they belong to
SELECT MUSICS.MUSIC_NAME, GENRES.GENRE_NAME
FROM MUSICS
INNER JOIN MUSICSINGENRES ON MUSICS.MUSIC_ID = MUSICSINGENRES.MUSIC_ID
INNER JOIN GENRES ON MUSICSINGENRES.GENRE_ID = GENRES.GENRE_ID;

-- 20. the names of all music tracks and the awards they have received, sorted by the award's name
SELECT MUSICS.MUSIC_NAME, AWARDS.AWARD_NAME
FROM MUSICS
INNER JOIN MUSICSAWARDED ON MUSICS.MUSIC_ID = MUSICSAWARDED.MUSIC_ID
INNER JOIN AWARDS ON MUSICSAWARDED.AWARD_ID = AWARDS.AWARD_ID
ORDER BY AWARDS.AWARD_NAME ASC;

